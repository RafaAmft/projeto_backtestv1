#!/usr/bin/env python3
"""
Script para Organizar Relat√≥rios - Pasta Centralizada
=====================================================

Este script cria a pasta 'relatorios/' e organiza todos os relat√≥rios
de forma profissional para o GitHub.
"""

import os
import shutil
import json
from datetime import datetime
from pathlib import Path
import glob

class RelatoriosOrganizer:
    """Organizador de relat√≥rios para GitHub"""
    
    def __init__(self):
        self.root_dir = Path(".")
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Pasta principal de relat√≥rios
        self.relatorios_dir = Path("relatorios")
        
        # Subpastas organizadas
        self.subdirs = {
            'carteira_ideal': self.relatorios_dir / "carteira_ideal",
            'portfolio': self.relatorios_dir / "portfolio", 
            'cache': self.relatorios_dir / "cache",
            'executivo': self.relatorios_dir / "executivo",
            'testes': self.relatorios_dir / "testes",
            'graficos': self.relatorios_dir / "graficos"
        }
        
        # Criar estrutura
        self._create_structure()
    
    def _create_structure(self):
        """Cria a estrutura de pastas"""
        print("üìÅ Criando estrutura de relat√≥rios...")
        
        # Criar pasta principal
        self.relatorios_dir.mkdir(exist_ok=True)
        print(f"‚úÖ Pasta principal criada: {self.relatorios_dir}")
        
        # Criar subpastas
        for name, dir_path in self.subdirs.items():
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ Subpasta criada: {dir_path}")
    
    def organize_reports(self):
        """Organiza todos os relat√≥rios"""
        print("\nüìã ORGANIZANDO RELAT√ìRIOS")
        print("=" * 50)
        
        # 1. Relat√≥rios de Carteira Ideal
        self._move_carteira_ideal_reports()
        
        # 2. Relat√≥rios de Portfolio
        self._move_portfolio_reports()
        
        # 3. Relat√≥rios de Cache
        self._move_cache_reports()
        
        # 4. Relat√≥rios Executivos
        self._move_executive_reports()
        
        # 5. Relat√≥rios de Testes
        self._move_test_reports()
        
        # 6. Gr√°ficos
        self._move_graphics()
        
        print("\n‚úÖ Organiza√ß√£o conclu√≠da!")
        self._create_readme()
        self._print_summary()
    
    def _move_carteira_ideal_reports(self):
        """Move relat√≥rios de carteira ideal"""
        print("\nüéØ Movendo relat√≥rios de Carteira Ideal...")
        
        patterns = [
            "relatorio_carteira_ideal_*.txt",
            "relatorio_carteira_ideal_*.json"
        ]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file_path in files:
                src = Path(file_path)
                if src.exists():
                    dst = self.subdirs['carteira_ideal'] / src.name
                    try:
                        shutil.move(str(src), str(dst))
                        print(f"  ‚úÖ {src.name} ‚Üí carteira_ideal/")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao mover {src.name}: {e}")
    
    def _move_portfolio_reports(self):
        """Move relat√≥rios de portfolio"""
        print("\nüìä Movendo relat√≥rios de Portfolio...")
        
        patterns = [
            "relatorio_portfolio_*.txt",
            "relatorio_portfolio_*.json"
        ]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file_path in files:
                src = Path(file_path)
                if src.exists():
                    dst = self.subdirs['portfolio'] / src.name
                    try:
                        shutil.move(str(src), str(dst))
                        print(f"  ‚úÖ {src.name} ‚Üí portfolio/")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao mover {src.name}: {e}")
    
    def _move_cache_reports(self):
        """Move relat√≥rios de cache"""
        print("\nüíæ Movendo relat√≥rios de Cache...")
        
        # Mover arquivos da pasta relatorios_cache
        cache_source = Path("relatorios_cache")
        if cache_source.exists():
            for file_path in cache_source.glob("*"):
                if file_path.is_file():
                    dst = self.subdirs['cache'] / file_path.name
                    try:
                        shutil.move(str(file_path), str(dst))
                        print(f"  ‚úÖ {file_path.name} ‚Üí cache/")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao mover {file_path.name}: {e}")
    
    def _move_executive_reports(self):
        """Move relat√≥rios executivos"""
        print("\nüìã Movendo relat√≥rios Executivos...")
        
        patterns = [
            "relatorio_executivo_*.txt",
            "relatorio_executivo_*.json"
        ]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file_path in files:
                src = Path(file_path)
                if src.exists():
                    dst = self.subdirs['executivo'] / src.name
                    try:
                        shutil.move(str(src), str(dst))
                        print(f"  ‚úÖ {src.name} ‚Üí executivo/")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao mover {src.name}: {e}")
    
    def _move_test_reports(self):
        """Move relat√≥rios de testes"""
        print("\nüß™ Movendo relat√≥rios de Testes...")
        
        patterns = [
            "test_report_*.json",
            "teste_*.json",
            "yahoo_connection_test.json"
        ]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file_path in files:
                src = Path(file_path)
                if src.exists():
                    dst = self.subdirs['testes'] / src.name
                    try:
                        shutil.move(str(src), str(dst))
                        print(f"  ‚úÖ {src.name} ‚Üí testes/")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao mover {src.name}: {e}")
    
    def _move_graphics(self):
        """Move gr√°ficos"""
        print("\nüìà Movendo gr√°ficos...")
        
        patterns = ["*.png", "*.jpg", "*.jpeg"]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            for file_path in files:
                src = Path(file_path)
                if src.exists() and src.is_file():
                    dst = self.subdirs['graficos'] / src.name
                    try:
                        shutil.move(str(src), str(dst))
                        print(f"  ‚úÖ {src.name} ‚Üí graficos/")
                    except Exception as e:
                        print(f"  ‚ùå Erro ao mover {src.name}: {e}")
    
    def _create_readme(self):
        """Cria README para a pasta de relat√≥rios"""
        readme_content = f"""# üìã Relat√≥rios do Projeto

Esta pasta cont√©m todos os relat√≥rios gerados pelo sistema de an√°lise financeira.

## üìÅ Estrutura

### üéØ `carteira_ideal/`
Relat√≥rios da carteira ideal diversificada:
- `relatorio_carteira_ideal_YYYYMMDD_HHMMSS.txt` - Relat√≥rio completo em texto
- `relatorio_carteira_ideal_YYYYMMDD_HHMMSS.json` - Dados estruturados

### üìä `portfolio/`
Relat√≥rios de an√°lise de portf√≥lios:
- `relatorio_portfolio_YYYYMMDD_HHMMSS.txt` - An√°lise de portf√≥lio

### üíæ `cache/`
Relat√≥rios do sistema de cache:
- Relat√≥rios de performance do cache
- Testes de integra√ß√£o
- M√©tricas de hit rate

### üìã `executivo/`
Relat√≥rios executivos:
- Resumos para tomada de decis√£o
- M√©tricas consolidadas
- An√°lises de risco

### üß™ `testes/`
Relat√≥rios de testes:
- Testes de APIs
- Valida√ß√µes de dados
- Relat√≥rios de qualidade

### üìà `graficos/`
Gr√°ficos e visualiza√ß√µes:
- Evolu√ß√£o de carteiras
- An√°lises de performance
- Dashboards

## üåê Links P√∫blicos

Ap√≥s fazer push para o GitHub, os relat√≥rios ficam dispon√≠veis em:
- **Carteira Ideal**: https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/carteira_ideal/
- **Portfolio**: https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/portfolio/
- **Cache**: https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/cache/
- **Executivo**: https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/executivo/
- **Testes**: https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/testes/
- **Gr√°ficos**: https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/graficos/

## üìÖ √öltima Organiza√ß√£o

Organizado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}

## üöÄ Como Usar

1. **Visualizar relat√≥rios**: Acesse os links do GitHub acima
2. **Baixar relat√≥rios**: Clique em "Raw" no GitHub para download
3. **Gerar novos relat√≥rios**: Execute os scripts correspondentes
4. **Organizar automaticamente**: Execute este script novamente

## üìä Estat√≠sticas

- **Total de relat√≥rios**: {self._count_total_reports()}
- **√öltima atualiza√ß√£o**: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
- **Vers√£o**: 1.0

---
*Relat√≥rios gerados automaticamente pelo Sistema de An√°lise Financeira*
"""
        
        readme_path = self.relatorios_dir / "README.md"
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        print(f"üìÑ README criado: {readme_path}")
    
    def _count_total_reports(self):
        """Conta total de relat√≥rios"""
        total = 0
        for subdir in self.subdirs.values():
            if subdir.exists():
                total += len(list(subdir.glob("*")))
        return total
    
    def _print_summary(self):
        """Imprime resumo da organiza√ß√£o"""
        print("\nüìä RESUMO DA ORGANIZA√á√ÉO:")
        print("=" * 30)
        
        for name, dir_path in self.subdirs.items():
            if dir_path.exists():
                file_count = len(list(dir_path.glob("*")))
                print(f"üìÅ {name}: {file_count} arquivos")
        
        total = self._count_total_reports()
        print(f"\nüìã Total: {total} relat√≥rios organizados")
        
        print(f"\nüåê Links p√∫blicos dispon√≠veis ap√≥s push:")
        print(f"   https://github.com/RafaAmft/projeto_backtestv1/blob/main/relatorios/")

def main():
    """Fun√ß√£o principal"""
    print("üìã ORGANIZADOR DE RELAT√ìRIOS PARA GITHUB")
    print("=" * 50)
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    organizer = RelatoriosOrganizer()
    
    # Confirmar antes de organizar
    print("\n‚ö†Ô∏è ATEN√á√ÉO: Este script ir√° mover relat√≥rios para a pasta 'relatorios/'")
    print("Arquivos que ser√£o organizados:")
    print("- Relat√≥rios de carteira ideal")
    print("- Relat√≥rios de portfolio")
    print("- Relat√≥rios de cache")
    print("- Relat√≥rios executivos")
    print("- Relat√≥rios de testes")
    print("- Gr√°ficos")
    
    response = input("\nContinuar? (s/N): ").strip().lower()
    if response != 's':
        print("‚ùå Opera√ß√£o cancelada")
        return
    
    # Executar organiza√ß√£o
    organizer.organize_reports()
    
    print("\nüéâ Organiza√ß√£o conclu√≠da com sucesso!")
    print("üìÅ Relat√≥rios organizados em: relatorios/")
    print("üåê Fa√ßa push para o GitHub para gerar os links p√∫blicos!")

if __name__ == "__main__":
    main() 