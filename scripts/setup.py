#!/usr/bin/env python3
"""
Script de Setup - Sistema de An√°lise Financeira
===============================================

Este script configura o ambiente de desenvolvimento e valida a instala√ß√£o
do sistema de an√°lise financeira.
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from datetime import datetime

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(f"üöÄ {title}")
    print("="*60)

def print_step(step, description):
    """Imprime passo do setup"""
    print(f"\nüìã {step}. {description}")

def run_command(command, description, check=True):
    """Executa comando e retorna sucesso"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=300
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - Sucesso")
            return True
        else:
            print(f"‚ùå {description} - Falha")
            if result.stderr:
                print(f"   Erro: {result.stderr[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå {description} - Erro: {e}")
        return False

def check_python_version():
    """Verifica vers√£o do Python"""
    print_step(1, "Verificando vers√£o do Python")
    
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - Vers√£o m√≠nima: 3.8")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print_step(2, "Criando estrutura de diret√≥rios")
    
    directories = [
        "logs",
        "reports",
        "data/cache",
        "data/historical",
        "tests/data",
        "config"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado: {directory}")
    
    return True

def install_dependencies():
    """Instala depend√™ncias do projeto"""
    print_step(3, "Instalando depend√™ncias")
    
    # Verificar se requirements.txt existe
    if not Path("requirements.txt").exists():
        print("‚ùå Arquivo requirements.txt n√£o encontrado")
        return False
    
    # Instalar depend√™ncias
    success = run_command(
        "pip install -r requirements.txt",
        "Instalando depend√™ncias do requirements.txt"
    )
    
    return success

def validate_imports():
    """Valida imports principais"""
    print_step(4, "Validando imports principais")
    
    modules_to_test = [
        ("pandas", "pd"),
        ("numpy", "np"),
        ("yfinance", "yf"),
        ("requests", "requests"),
        ("matplotlib", "plt"),
        ("streamlit", "st")
    ]
    
    failed_imports = []
    
    for module_name, alias in modules_to_test:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
            failed_imports.append(module_name)
    
    if failed_imports:
        print(f"\n‚ö†Ô∏è M√≥dulos com falha: {', '.join(failed_imports)}")
        return False
    
    return True

def test_core_functionality():
    """Testa funcionalidade b√°sica do core"""
    print_step(5, "Testando funcionalidade do core")
    
    try:
        # Testar import do core
        sys.path.append(os.getcwd())
        from core.market_indices import market_indices
        
        # Teste b√°sico de c√¢mbio
        rates = market_indices.get_exchange_rate()
        if rates and 'USD_BRL' in rates:
            print(f"‚úÖ Core funcionando - D√≥lar: R$ {rates['USD_BRL']:.4f}")
            return True
        else:
            print("‚ùå Core n√£o retornou dados v√°lidos")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no core: {e}")
        return False

def create_config_files():
    """Cria arquivos de configura√ß√£o"""
    print_step(6, "Criando arquivos de configura√ß√£o")
    
    # Verificar se config.yaml j√° existe
    if Path("config/config.yaml").exists():
        print("‚úÖ config.yaml j√° existe")
    else:
        print("‚ö†Ô∏è config.yaml n√£o encontrado - ser√° criado pelo usu√°rio")
    
    # Criar .env template com configura√ß√µes de seguran√ßa
    env_template = """# üîí CONFIGURA√á√ïES DE AMBIENTE - SISTEMA DE AN√ÅLISE FINANCEIRA
# ‚ö†Ô∏è IMPORTANTE: Copie este arquivo para .env e configure suas chaves
# ‚ö†Ô∏è NUNCA commite o arquivo .env no reposit√≥rio

# ============================================================================
# üîë CHAVES DE API (OPCIONAIS)
# ============================================================================

# Binance API (para dados privados e trading)
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_API_SECRET=your_binance_api_secret_here

# Yahoo Finance API (se necess√°rio)
YAHOO_API_KEY=your_yahoo_api_key_here

# Exchange Rate API (se necess√°rio)
EXCHANGE_RATE_API_KEY=your_exchange_rate_api_key_here

# ============================================================================
# üìß CONFIGURA√á√ïES DE EMAIL (OPCIONAIS)
# ============================================================================

# Servidor SMTP
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password_here

# Destinat√°rios para notifica√ß√µes
EMAIL_RECIPIENTS=user1@example.com,user2@example.com

# ============================================================================
# üîß CONFIGURA√á√ïES DO SISTEMA
# ============================================================================

# N√≠vel de log (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Arquivo de log
LOG_FILE=logs/app.log

# Configura√ß√µes de cache
CACHE_DURATION=300
CACHE_STORAGE=memory

# ============================================================================
# üåê CONFIGURA√á√ïES DE REDE
# ============================================================================

# Timeout para requisi√ß√µes HTTP (segundos)
REQUEST_TIMEOUT=30

# N√∫mero m√°ximo de tentativas de reconex√£o
MAX_RETRY_ATTEMPTS=3

# Delay entre tentativas (segundos)
RETRY_DELAY=1

# ============================================================================
# üîí CONFIGURA√á√ïES DE SEGURAN√áA
# ============================================================================

# Habilitar valida√ß√£o de entrada
VALIDATE_INPUT=true

# Habilitar sanitiza√ß√£o de dados
SANITIZE_DATA=true

# Log de opera√ß√µes sens√≠veis (false em produ√ß√£o)
LOG_SENSITIVE_OPERATIONS=false

# Verifica√ß√£o SSL
SSL_VERIFY=true

# Rate limiting (requisi√ß√µes por minuto)
RATE_LIMIT=1200

# ============================================================================
# üìä CONFIGURA√á√ïES DE AN√ÅLISE
# ============================================================================

# Taxa livre de risco (CDI anual)
RISK_FREE_RATE=0.12

# N√≠vel de confian√ßa para VaR
CONFIDENCE_LEVEL=0.95

# Janela de volatilidade (dias)
VOLATILITY_WINDOW=30

# ============================================================================
# üéØ CONFIGURA√á√ïES DE PORTF√ìLIO
# ============================================================================

# Moedas padr√£o
DEFAULT_CURRENCIES=USD,BRL

# Calcular m√©tricas de risco
CALCULATE_SHARPE=true
CALCULATE_VAR=true
CALCULATE_MAX_DRAWDOWN=true
CALCULATE_BETA=true

# ============================================================================
# üìà CONFIGURA√á√ïES DE RELAT√ìRIOS
# ============================================================================

# Diret√≥rio de sa√≠da
REPORTS_OUTPUT_DIR=reports/

# Formatos de sa√≠da
REPORTS_FORMATS=json,csv,xlsx

# Salvar automaticamente
AUTO_SAVE_REPORTS=true

# Incluir gr√°ficos
INCLUDE_CHARTS=true

# Incluir m√©tricas
INCLUDE_METRICS=true

# ============================================================================
# üñ•Ô∏è CONFIGURA√á√ïES DO DASHBOARD
# ============================================================================

# Porta do Streamlit
STREAMLIT_PORT=8501

# Host do Streamlit
STREAMLIT_HOST=localhost

# Tema do Streamlit
STREAMLIT_THEME=light

# ============================================================================
# üß™ CONFIGURA√á√ïES DE TESTES
# ============================================================================

# Usar APIs mock para testes
MOCK_APIS=false

# Diret√≥rio de dados de teste
TEST_DATA_DIR=tests/data/

# Threshold de cobertura de testes
COVERAGE_THRESHOLD=80

# Timeout para testes
TEST_TIMEOUT=30

# ============================================================================
# üìä CONFIGURA√á√ïES DE MONITORAMENTO
# ============================================================================

# Habilitar monitoramento
MONITORING_ENABLED=true

# Intervalo de m√©tricas (segundos)
METRICS_INTERVAL=60

# Thresholds de alerta
ERROR_RATE_THRESHOLD=0.05
RESPONSE_TIME_THRESHOLD=5.0
CACHE_HIT_RATE_THRESHOLD=0.8

# ============================================================================
# üíæ CONFIGURA√á√ïES DE BACKUP
# ============================================================================

# Habilitar backup
BACKUP_ENABLED=true

# Frequ√™ncia de backup
BACKUP_FREQUENCY=daily

# Reten√ß√£o de backups (dias)
BACKUP_RETENTION_DAYS=30

# Incluir relat√≥rios no backup
BACKUP_INCLUDE_REPORTS=true

# Incluir logs no backup
BACKUP_INCLUDE_LOGS=true

# ============================================================================
# üîî CONFIGURA√á√ïES DE NOTIFICA√á√ïES
# ============================================================================

# Habilitar notifica√ß√µes por email
EMAIL_NOTIFICATIONS_ENABLED=false

# Habilitar webhooks
WEBHOOK_ENABLED=false

# URL do webhook
WEBHOOK_URL=

# Eventos para notifica√ß√£o
WEBHOOK_EVENTS=error,warning,success

# ============================================================================
# üåç CONFIGURA√á√ïES DE AMBIENTE
# ============================================================================

# Ambiente (development, staging, production)
ENVIRONMENT=development

# Debug mode
DEBUG=true

# Timezone
TIMEZONE=America/Sao_Paulo

# ============================================================================
# üìù INSTRU√á√ïES DE USO
# ============================================================================

# 1. Copie este arquivo para .env
# 2. Configure as vari√°veis necess√°rias
# 3. Mantenha as chaves de API seguras
# 4. Nunca commite o arquivo .env
# 5. Use diferentes configura√ß√µes para cada ambiente
"""
    
    with open(".env.template", "w", encoding="utf-8") as f:
        f.write(env_template)
    
    print("‚úÖ .env.template criado com configura√ß√µes de seguran√ßa")
    return True

def run_quick_tests():
    """Executa testes r√°pidos"""
    print_step(7, "Executando testes r√°pidos")
    
    # Teste do script de testes
    if Path("scripts/run_tests.py").exists():
        success = run_command(
            "python scripts/run_tests.py",
            "Executando testes automatizados",
            check=False  # N√£o falhar se testes falharem
        )
        return success
    else:
        print("‚ö†Ô∏è Script de testes n√£o encontrado")
        return True

def generate_setup_report(results):
    """Gera relat√≥rio do setup"""
    print_header("RELAT√ìRIO DO SETUP")
    
    total_steps = len(results)
    successful_steps = sum(1 for success in results.values() if success)
    success_rate = (successful_steps / total_steps) * 100
    
    print(f"\nüìä RESUMO:")
    print(f"  Passos: {successful_steps}/{total_steps}")
    print(f"  Taxa de Sucesso: {success_rate:.1f}%")
    
    print(f"\nüìã DETALHES:")
    for step, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {step}")
    
    # Salvar relat√≥rio
    report = {
        'timestamp': datetime.now().isoformat(),
        'total_steps': total_steps,
        'successful_steps': successful_steps,
        'success_rate': success_rate,
        'results': results
    }
    
    report_file = f"setup_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Relat√≥rio salvo em: {report_file}")
    
    return success_rate >= 80

def print_next_steps():
    """Imprime pr√≥ximos passos"""
    print_header("PR√ìXIMOS PASSOS")
    
    print("""
üéØ Para come√ßar a usar o sistema:

1. üìù Configure suas APIs (opcional):
   - Copie .env.template para .env
   - Adicione suas chaves de API

2. üöÄ Execute o exemplo b√°sico:
   python examples/portfolio_analysis_example.py

3. üìä Teste o dashboard:
   streamlit run "CNPJ VALIDADO/app.py"

4. üß™ Execute todos os testes:
   python scripts/run_tests.py

5. üìö Leia a documenta√ß√£o:
   - README.md
   - docs/MarketIndicesManager_README.md
   - ROADMAP.md

üîó Links √∫teis:
   - GitHub: https://github.com/seu-usuario/projeto-final
   - Documenta√ß√£o: docs/
   - Exemplos: examples/
""")

def main():
    """Fun√ß√£o principal"""
    print_header("SETUP DO SISTEMA DE AN√ÅLISE FINANCEIRA")
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"Diret√≥rio: {os.getcwd()}")
    
    # Executar todos os passos
    results = {
        'Python Version': check_python_version(),
        'Directories': create_directories(),
        'Dependencies': install_dependencies(),
        'Imports': validate_imports(),
        'Core Functionality': test_core_functionality(),
        'Config Files': create_config_files(),
        'Quick Tests': run_quick_tests()
    }
    
    # Gerar relat√≥rio
    success = generate_setup_report(results)
    
    if success:
        print("\nüéâ SETUP CONCLU√çDO COM SUCESSO!")
        print_next_steps()
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è SETUP CONCLU√çDO COM PROBLEMAS!")
        print("Verifique os erros acima e tente novamente.")
        sys.exit(1)

if __name__ == "__main__":
    main() 