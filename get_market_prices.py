#!/usr/bin/env python3
"""
Script para buscar preÃ§os de mercado em tempo real
- Criptomoedas: preÃ§os de abertura em BRL
- AÃ§Ãµes: Ãºltimos preÃ§os de fechamento em BRL
"""

import yfinance as yf
import requests
from datetime import datetime
import time

def get_usd_brl_rate():
    """Busca cotaÃ§Ã£o USD/BRL via API do Banco Central"""
    try:
        url = "https://api.bcb.gov.br/dados/serie/bcdata.sgs.1/dados/ultimos/1?formato=json"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return float(data[0]['valor'])
        else:
            # Fallback para cotaÃ§Ã£o fixa se API falhar
            return 5.42
    except:
        return 5.42

def get_crypto_prices():
    """Busca preÃ§os de abertura das criptomoedas em USD e converte para BRL"""
    cryptos = ['BTC-USD', 'ETH-USD', 'SOL-USD', 'BNB-USD', 'AVAX-USD']
    usd_brl = get_usd_brl_rate()
    
    print("ðŸª™ PREÃ‡OS DE ABERTURA - CRIPTOMOEDAS (BRL)")
    print("=" * 60)
    
    for crypto in cryptos:
        try:
            ticker = yf.Ticker(crypto)
            # Busca dados dos Ãºltimos 2 dias para pegar abertura de hoje
            hist = ticker.history(period="2d")
            
            if len(hist) >= 2:
                # PreÃ§o de abertura de hoje
                open_price_usd = float(hist.iloc[-1]['Open'])
                # PreÃ§o atual
                current_price_usd = float(hist.iloc[-1]['Close'])
                # VariaÃ§Ã£o do dia
                daily_change = ((current_price_usd - open_price_usd) / open_price_usd) * 100
                
                # ConversÃ£o para BRL
                open_price_brl = open_price_usd * usd_brl
                current_price_brl = current_price_usd * usd_brl
                
                symbol = crypto.replace('-USD', '')
                print(f"{symbol:>6}: Abertura R$ {open_price_brl:>10.2f} | "
                      f"Atual R$ {current_price_brl:>10.2f} | "
                      f"Var: {daily_change:>+6.2f}%")
                
        except Exception as e:
            print(f"Erro ao buscar {crypto}: {e}")
    
    print(f"\nðŸ’± CotaÃ§Ã£o USD/BRL: R$ {usd_brl:.4f}")
    print()

def get_stock_prices():
    """Busca Ãºltimos preÃ§os de fechamento das aÃ§Ãµes em BRL"""
    stocks = ['PETR4.SA', 'VALE3.SA', 'ITUB4.SA', 'WEGE3.SA', 'LREN3.SA']
    
    print("ðŸ“ˆ ÃšLTIMOS PREÃ‡OS DE FECHAMENTO - AÃ‡Ã•ES (BRL)")
    print("=" * 60)
    
    for stock in stocks:
        try:
            ticker = yf.Ticker(stock)
            hist = ticker.history(period="5d")
            
            if len(hist) > 0:
                # Ãšltimo preÃ§o de fechamento
                last_close = float(hist.iloc[-1]['Close'])
                # PreÃ§o de abertura do Ãºltimo dia
                last_open = float(hist.iloc[-1]['Open'])
                # VariaÃ§Ã£o do Ãºltimo dia
                daily_change = ((last_close - last_open) / last_open) * 100
                
                symbol = stock.replace('.SA', '')
                print(f"{symbol:>6}: Fechamento R$ {last_close:>10.2f} | "
                      f"Abertura R$ {last_open:>10.2f} | "
                      f"Var: {daily_change:>+6.2f}%")
                
        except Exception as e:
            print(f"Erro ao buscar {stock}: {e}")
    
    print()

def generate_portfolio_data():
    """Gera dados formatados para uso no painel Streamlit"""
    print("ðŸ“‹ DADOS FORMATADOS PARA O PAINEL STREAMLIT")
    print("=" * 60)
    
    # Criptomoedas
    cryptos = ['BTC-USD', 'ETH-USD', 'SOL-USD', 'BNB-USD', 'AVAX-USD']
    usd_brl = get_usd_brl_rate()
    
    print("ðŸª™ CRIPTOMOEDAS (PreÃ§os de Abertura em BRL):")
    for crypto in cryptos:
        try:
            ticker = yf.Ticker(crypto)
            hist = ticker.history(period="2d")
            
            if len(hist) >= 2:
                open_price_usd = float(hist.iloc[-1]['Open'])
                open_price_brl = open_price_usd * usd_brl
                symbol = crypto.replace('-USD', '')
                print(f"  '{symbol}': {open_price_brl:.2f},")
                
        except Exception as e:
            print(f"  # Erro {crypto}: {e}")
    
    print("\nðŸ“ˆ AÃ‡Ã•ES (Ãšltimos PreÃ§os de Fechamento em BRL):")
    stocks = ['PETR4.SA', 'VALE3.SA', 'ITUB4.SA', 'WEGE3.SA', 'LREN3.SA']
    
    for stock in stocks:
        try:
            ticker = yf.Ticker(stock)
            hist = ticker.history(period="5d")
            
            if len(hist) > 0:
                last_close = float(hist.iloc[-1]['Close'])
                symbol = stock.replace('.SA', '')
                print(f"  '{symbol}': {last_close:.2f},")
                
        except Exception as e:
            print(f"  # Erro {stock}: {e}")
    
    print("\nðŸ’¡ INSTRUÃ‡Ã•ES:")
    print("1. Copie os valores acima para o painel Streamlit")
    print("2. Para criptomoedas, use os preÃ§os de abertura como 'PreÃ§o de Entrada'")
    print("3. Para aÃ§Ãµes, use os preÃ§os de fechamento como 'PreÃ§o Atual'")
    print("4. Defina as quantidades conforme seu portfÃ³lio")

def main():
    print("ðŸš€ SISTEMA DE BUSCA DE PREÃ‡OS DE MERCADO")
    print("=" * 60)
    print(f"ðŸ“… Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Busca preÃ§os
    get_crypto_prices()
    get_stock_prices()
    
    # Gera dados formatados
    generate_portfolio_data()
    
    print("âœ… Busca concluÃ­da!")

if __name__ == "__main__":
    main() 