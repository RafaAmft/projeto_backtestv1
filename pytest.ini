# ========================================
# PYTEST CONFIGURATION
# Sistema de Análise de Portfólios v1.1.0
# ========================================

[pytest]
# Diretórios onde os testes estão localizados
testpaths = 
    tests
    .

# Padrões de arquivos e funções de teste
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Markers customizados
markers =
    slow: marca testes lentos que podem ser pulados com -m "not slow"
    integration: testes de integração que acessam APIs externas
    unit: testes unitários rápidos e isolados
    api: testes que usam APIs reais (Binance, Yahoo, etc)
    cache: testes relacionados ao sistema de cache
    portfolio: testes de análise de portfólio
    fund: testes de fundos CVM
    crypto: testes de criptomoedas
    benchmark: testes de performance
    security: testes de segurança

# Opções padrão do pytest
addopts = 
    # Verbosidade
    --verbose
    --tb=short
    
    # Strict markers (falha se marker não definido)
    --strict-markers
    
    # Cobertura de código
    --cov=core
    --cov=apis
    --cov=dashboard
    --cov=examples
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    
    # Falhar se cobertura < 70% (meta: 80%)
    --cov-fail-under=70
    
    # Mostrar warnings
    -ra
    
    # Captura de output
    --capture=no
    
    # Duração dos testes mais lentos
    --durations=10
    
    # Colorir output
    --color=yes

# Ignorar warnings específicos
filterwarnings =
    # Ignorar DeprecationWarnings de bibliotecas externas
    ignore::DeprecationWarning:yfinance.*
    ignore::DeprecationWarning:pandas.*
    ignore::DeprecationWarning:matplotlib.*
    
    # Ignorar ResourceWarnings
    ignore::ResourceWarning
    
    # Ignorar warnings específicos do requests
    ignore::urllib3.exceptions.InsecureRequestWarning
    
    # Tornar outros warnings em erros (strict)
    # error::UserWarning

# Configurações de cobertura
[coverage:run]
source = 
    core
    apis
    dashboard
    examples

omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    setup.py
    conftest.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

# Excluir linhas da cobertura
exclude_lines =
    # Padrão
    pragma: no cover
    
    # Blocos de debug
    def __repr__
    if self\.debug
    
    # Condições de ambiente
    if __name__ == .__main__.:
    
    # Type checking
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:
    
    # Raise abstratos
    raise AssertionError
    raise NotImplementedError
    
    # Pass statements
    pass
    
    # Ellipsis
    \.\.\.
    
    # Defensive programming
    except ImportError:
    except Exception:

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# ========================================
# COMO USAR
# ========================================
#
# 1. EXECUTAR TODOS OS TESTES:
#    pytest
#
# 2. EXECUTAR APENAS TESTES UNITÁRIOS:
#    pytest -m unit
#
# 3. EXECUTAR APENAS TESTES RÁPIDOS:
#    pytest -m "not slow"
#
# 4. EXECUTAR TESTES SEM APIs EXTERNAS:
#    pytest -m "not api"
#
# 5. EXECUTAR TESTE ESPECÍFICO:
#    pytest tests/test_market_indices.py
#
# 6. EXECUTAR COM MAIS DETALHES:
#    pytest -vv
#
# 7. EXECUTAR E PARAR NO PRIMEIRO ERRO:
#    pytest -x
#
# 8. EXECUTAR E MOSTRAR PRINT:
#    pytest -s
#
# 9. GERAR APENAS RELATÓRIO DE COBERTURA:
#    pytest --cov-report=html
#
# 10. EXECUTAR TESTES PARALELOS (requer pytest-xdist):
#     pytest -n auto
#
# ========================================


