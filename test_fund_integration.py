#!/usr/bin/env python3
"""
Teste de Integra√ß√£o para An√°lise de Fundos
Testa a integra√ß√£o da an√°lise de fundos no sistema principal de an√°lise de portf√≥lio
"""

import sys
import os
import json
from datetime import datetime, timedelta
import pandas as pd
import numpy as np

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from examples.portfolio_analysis_example import PortfolioAnalyzer

def test_fund_integration():
    """Testa a integra√ß√£o completa da an√°lise de fundos"""
    print("=" * 60)
    print("TESTE DE INTEGRA√á√ÉO - AN√ÅLISE DE FUNDOS")
    print("=" * 60)
    print(f"üìÖ PER√çODO DE TESTE: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    print(f"‚è±Ô∏è  DURA√á√ÉO: Teste pontual (dados simulados)")
    print("=" * 60)
    
    try:
        # Criar inst√¢ncia do analisador
        analyzer = PortfolioAnalyzer()
        
        # Testar an√°lise de fundos
        print("\n1. Testando an√°lise de fundos...")
        fund_data = analyzer.analyze_funds()
        
        if fund_data:
            print("‚úÖ An√°lise de fundos executada com sucesso")
            print(f"   - Fundos analisados: {len(fund_data['fundos'])}")
            print(f"   - M√©tricas calculadas: {list(fund_data['metrics'].keys())}")
        else:
            print("‚ùå Falha na an√°lise de fundos")
            return False
        
        # Testar gera√ß√£o de relat√≥rio unificado
        print("\n2. Testando gera√ß√£o de relat√≥rio unificado...")
        unified_report = analyzer.generate_unified_report()
        
        if unified_report:
            print("‚úÖ Relat√≥rio unificado gerado com sucesso")
            print(f"   - Se√ß√µes inclu√≠das: {list(unified_report.keys())}")
            
            # Verificar se a se√ß√£o de fundos est√° presente
            if 'fundos' in unified_report:
                print("‚úÖ Se√ß√£o de fundos inclu√≠da no relat√≥rio")
            else:
                print("‚ùå Se√ß√£o de fundos n√£o encontrada no relat√≥rio")
                return False
        else:
            print("‚ùå Falha na gera√ß√£o do relat√≥rio unificado")
            return False
        
        # Testar salvamento do relat√≥rio
        print("\n3. Testando salvamento do relat√≥rio...")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"test_fund_integration_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(unified_report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Relat√≥rio salvo em: {filename}")
        
        # Mostrar resumo do relat√≥rio
        print("\n4. Resumo do relat√≥rio gerado:")
        print("-" * 40)
        
        if 'criptomoedas' in unified_report:
            crypto_count = len(unified_report['criptomoedas'].get('ativos', []))
            print(f"   Criptomoedas: {crypto_count} ativos")
        
        if 'acoes' in unified_report:
            stocks_count = len(unified_report['acoes'].get('ativos', []))
            print(f"   A√ß√µes: {stocks_count} ativos")
        
        if 'fundos' in unified_report:
            funds_count = len(unified_report['fundos'].get('fundos', []))
            print(f"   Fundos: {funds_count} fundos")
        
        if 'recomendacoes' in unified_report:
            recommendations_count = len(unified_report['recomendacoes'])
            print(f"   Recomenda√ß√µes: {recommendations_count} itens")
        
        print("\n‚úÖ Teste de integra√ß√£o conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_fund_metrics():
    """Testa especificamente as m√©tricas de fundos"""
    print("\n" + "=" * 60)
    print("TESTE ESPEC√çFICO - M√âTRICAS DE FUNDOS")
    print("=" * 60)
    print(f"üìÖ PER√çODO DE TESTE: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    print(f"‚è±Ô∏è  DURA√á√ÉO: Teste pontual (dados simulados)")
    print("=" * 60)
    
    try:
        analyzer = PortfolioAnalyzer()
        
        # Testar c√°lculo de m√©tricas de risco
        print("\n1. Testando c√°lculo de m√©tricas de risco...")
        
        # Dados simulados de um fundo
        fund_returns = [0.02, -0.01, 0.03, -0.02, 0.01, 0.02, -0.01, 0.03, 0.01, -0.01]
        
        # Calcular m√©tricas
        volatility = np.std(fund_returns) * np.sqrt(252)  # Anualizada
        sharpe_ratio = np.mean(fund_returns) / np.std(fund_returns) * np.sqrt(252)
        max_drawdown = calculate_max_drawdown(fund_returns)
        
        print(f"   Volatilidade anualizada: {volatility:.4f}")
        print(f"   Sharpe Ratio: {sharpe_ratio:.4f}")
        print(f"   M√°ximo Drawdown: {max_drawdown:.4f}")
        
        print("‚úÖ M√©tricas calculadas com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de m√©tricas: {str(e)}")
        return False

def calculate_max_drawdown(returns):
    """Calcula o m√°ximo drawdown de uma s√©rie de retornos"""
    cumulative = np.cumprod(1 + np.array(returns))
    running_max = np.maximum.accumulate(cumulative)
    drawdown = (cumulative - running_max) / running_max
    return np.min(drawdown)

def test_fund_data_validation():
    """Testa a valida√ß√£o de dados de fundos"""
    print("\n" + "=" * 60)
    print("TESTE DE VALIDA√á√ÉO - DADOS DE FUNDOS")
    print("=" * 60)
    print(f"üìÖ PER√çODO DE TESTE: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    print(f"‚è±Ô∏è  DURA√á√ÉO: Teste pontual (dados simulados)")
    print("=" * 60)
    
    try:
        # Dados simulados para teste
        test_funds = [
            {
                'nome': 'Fund Test 1',
                'cnpj': '00.000.000/0001-00',
                'retorno_anual': 0.15,
                'volatilidade': 0.12,
                'sharpe_ratio': 1.25,
                'categoria': 'Renda Vari√°vel'
            },
            {
                'nome': 'Fund Test 2',
                'cnpj': '00.000.000/0002-00',
                'retorno_anual': 0.08,
                'volatilidade': 0.05,
                'sharpe_ratio': 1.60,
                'categoria': 'Renda Fixa'
            }
        ]
        
        print(f"   Fundos para valida√ß√£o: {len(test_funds)}")
        
        # Validar dados
        for i, fund in enumerate(test_funds, 1):
            print(f"\n   Fundo {i}: {fund['nome']}")
            print(f"      CNPJ: {fund['cnpj']}")
            print(f"      Retorno: {fund['retorno_anual']:.2%}")
            print(f"      Volatilidade: {fund['volatilidade']:.2%}")
            print(f"      Sharpe: {fund['sharpe_ratio']:.2f}")
            print(f"      Categoria: {fund['categoria']}")
        
        print("\n‚úÖ Valida√ß√£o de dados conclu√≠da")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {str(e)}")
        return False

if __name__ == "__main__":
    print("Iniciando testes de integra√ß√£o de fundos...")
    
    # Executar todos os testes
    tests = [
        test_fund_integration,
        test_fund_metrics,
        test_fund_data_validation
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erro no teste {test.__name__}: {str(e)}")
            results.append(False)
    
    # Resumo final
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"\nTestes aprovados: {passed}/{total}")
    
    if passed == total:
        print("üéâ Todos os testes passaram!")
        print("‚úÖ A integra√ß√£o de fundos est√° funcionando corretamente")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam")
        print("‚ùå Verifique os erros acima e corrija os problemas")
    
    print("\nTeste conclu√≠do!") 