#!/usr/bin/env python3
"""
Script de Teste para Carteira Ideal
===================================

Este script testa a carteira ideal diversificada com:
- Renda Fixa (40%): CDB e LCI
- Fundos Cambiais (15%): 5 fundos especializados
- Criptomoedas (15%): 5 principais criptos
- A√ß√µes (30%): 3 a√ß√µes brasileiras
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.market_indices_fixed import MarketIndicesManager
from dashboard.portfolio_collector_v3 import PortfolioDataCollectorV3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import matplotlib.pyplot as plt
import io

class CarteiraIdealTest:
    """Classe para testar a carteira ideal diversificada"""
    
    def __init__(self):
        self.market_data = MarketIndicesManager()
        self.portfolio_collector = PortfolioDataCollectorV3()
        self.carteira_ideal = self.carregar_carteira_ideal()
        
    def carregar_carteira_ideal(self):
        """Carrega a carteira ideal do arquivo JSON"""
        try:
            with open('carteira_ideal.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå Arquivo carteira_ideal.json n√£o encontrado!")
            return None
    
    def atualizar_dados_mercado(self):
        """Atualiza dados de mercado"""
        print("üîÑ Atualizando dados de mercado...")
        try:
            self.market_data.get_all_market_data(force_update=True)
            print("‚úÖ Dados de mercado atualizados!")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao atualizar dados de mercado: {e}")
            return False
    
    def analisar_renda_fixa(self):
        """Analisa os ativos de renda fixa"""
        print("\nüìä Analisando Renda Fixa...")
        
        renda_fixa = self.carteira_ideal['alocacao']['renda_fixa']
        total_renda_fixa = renda_fixa['valor']
        
        print(f"üí∞ Valor total em Renda Fixa: R$ {total_renda_fixa:,.2f}")
        print(f"üìà Percentual da carteira: {renda_fixa['percentual']:.1f}%")
        
        for item in renda_fixa['itens']:
            print(f"   ‚Ä¢ {item['nome']}: R$ {item['valor']:,.2f} ({item['taxa_retorno']})")
        
        return {
            'total': total_renda_fixa,
            'percentual': renda_fixa['percentual'],
            'itens': renda_fixa['itens']
        }
    
    def analisar_fundos(self):
        """Analisa os fundos do portf√≥lio usando mapeamento manual"""
        print("\nüìä Analisando fundos de investimento...")
        
        # Carregar mapeamento manual
        try:
            with open('mapeamento_fundos.json', 'r', encoding='utf-8') as f:
                mapeamento = json.load(f)
        except FileNotFoundError:
            print("   ‚ùå Arquivo de mapeamento n√£o encontrado")
            return {}
        
        fundos = self.carteira_ideal['alocacao']['fundos_cambiais']
        total_fundos = fundos['valor']
        
        print(f"üí∞ Valor total em Fundos Cambiais: R$ {total_fundos:,.2f}")
        print(f"üìà Percentual da carteira: {fundos['percentual']:.1f}%")
        
        analise_fundos = {
            'total': total_fundos,
            'percentual': fundos['percentual'],
            'fundos': {}
        }
        
        for item in fundos['itens']:
            print(f"   üîç Analisando fundo: {item['nome']}")
            
            # Verificar se existe no mapeamento
            cnpj = item['cnpj']
            if cnpj in mapeamento['mapeamento_fundos']:
                dados_mapeamento = mapeamento['mapeamento_fundos'][cnpj]
                slug = dados_mapeamento['slug']
                
                print(f"      üìç Slug mapeado: {slug}")
                
                # Buscar dados do fundo
                dados_fundo = self.portfolio_collector.extrair_dados_fundo(slug, cnpj)
                
                if dados_fundo:
                    analise_fundos['fundos'][cnpj] = {
                        'nome': item['nome'],
                        'valor': item['valor'],
                        'taxa_retorno': item['taxa_retorno'],
                        'slug': slug,
                        'dados_mercado': dados_fundo,
                        'anos_dados': len(dados_fundo.get('rentabilidades', {}))
                    }
                    print(f"      ‚úÖ Dados obtidos: {len(dados_fundo.get('rentabilidades', {}))} anos")
                else:
                    print(f"      ‚ùå N√£o foi poss√≠vel obter dados do fundo")
                    # Fallback com dados b√°sicos
                    analise_fundos['fundos'][cnpj] = {
                        'nome': item['nome'],
                        'valor': item['valor'],
                        'taxa_retorno': item['taxa_retorno'],
                        'slug': slug,
                        'dados_mercado': None,
                        'erro': 'Dados n√£o dispon√≠veis'
                    }
            else:
                print(f"      ‚ùå Fundo n√£o encontrado no mapeamento")
                # Fallback com dados b√°sicos
                analise_fundos['fundos'][cnpj] = {
                    'nome': item['nome'],
                    'valor': item['valor'],
                    'taxa_retorno': item['taxa_retorno'],
                    'slug': None,
                    'dados_mercado': None,
                    'erro': 'N√£o mapeado'
                }
        
        return analise_fundos
    
    def analisar_criptomoedas(self):
        """Analisa as criptomoedas"""
        print("\n‚Çø Analisando Criptomoedas...")
        
        criptos = self.carteira_ideal['alocacao']['criptomoedas']
        total_criptos = criptos['valor']
        
        print(f"üí∞ Valor total em Criptomoedas: R$ {total_criptos:,.2f}")
        print(f"üìà Percentual da carteira: {criptos['percentual']:.1f}%")
        
        analise_criptos = {
            'total': total_criptos,
            'percentual': criptos['percentual'],
            'criptos': {}
        }
        
        # Buscar todos os pre√ßos de criptomoedas de uma vez
        try:
            dados_criptos = self.market_data.get_crypto_prices()
            
            for item in criptos['itens']:
                ticker = item['ticker']
                print(f"   üîç Analisando {item['nome']} ({ticker})")
                
                # Buscar pre√ßo atual
                if ticker in dados_criptos:
                    preco_atual = dados_criptos[ticker].get('price', 0)
                    preco_brl = dados_criptos[ticker].get('price_brl', 0)
                    valor_atual = item['valor']  # Assumindo valor fixo para teste
                    
                    analise_criptos['criptos'][ticker] = {
                        'nome': item['nome'],
                        'valor': item['valor'],
                        'preco_atual': preco_atual,
                        'preco_brl': preco_brl,
                        'valor_atual': valor_atual
                    }
                    print(f"      ‚úÖ Pre√ßo atual: ${preco_atual:,.2f} (R$ {preco_brl:,.2f})")
                else:
                    print(f"      ‚ùå Pre√ßo n√£o dispon√≠vel para {ticker}")
                    
        except Exception as e:
            print(f"      ‚ùå Erro ao obter pre√ßos de criptomoedas: {e}")
        
        return analise_criptos
    
    def analisar_acoes(self):
        """Analisa as a√ß√µes"""
        print("\nüìà Analisando A√ß√µes...")
        
        acoes = self.carteira_ideal['alocacao']['acoes']
        total_acoes = acoes['valor']
        
        print(f"üí∞ Valor total em A√ß√µes: R$ {total_acoes:,.2f}")
        print(f"üìà Percentual da carteira: {acoes['percentual']:.1f}%")
        
        analise_acoes = {
            'total': total_acoes,
            'percentual': acoes['percentual'],
            'acoes': {}
        }
        
        # Buscar a√ß√µes espec√≠ficas da carteira ideal
        try:
            # Extrair tickers das a√ß√µes da carteira
            tickers_acoes = [item['ticker'] for item in acoes['itens']]
            print(f"   üîç Buscando dados para: {tickers_acoes}")
            
            # Buscar dados espec√≠ficos para essas a√ß√µes
            dados_acoes = self.market_data.get_stock_indices(symbols=tickers_acoes)
            
            for item in acoes['itens']:
                ticker = item['ticker']
                print(f"   üîç Analisando {item['nome']} ({ticker})")
                
                # Buscar pre√ßo atual
                if ticker in dados_acoes:
                    preco_atual = dados_acoes[ticker].get('price', 0)
                    valor_atual = item['valor']  # Assumindo valor fixo para teste
                    
                    analise_acoes['acoes'][ticker] = {
                        'nome': item['nome'],
                        'valor': item['valor'],
                        'preco_atual': preco_atual,
                        'valor_atual': valor_atual
                    }
                    print(f"      ‚úÖ Pre√ßo atual: R$ {preco_atual:,.2f}")
                else:
                    print(f"      ‚ùå Pre√ßo n√£o dispon√≠vel para {ticker}")
                    # Fallback com dados b√°sicos
                    analise_acoes['acoes'][ticker] = {
                        'nome': item['nome'],
                        'valor': item['valor'],
                        'preco_atual': 0,
                        'valor_atual': item['valor'],
                        'erro': 'Pre√ßo n√£o dispon√≠vel'
                    }
                    
        except Exception as e:
            print(f"      ‚ùå Erro ao obter pre√ßos de a√ß√µes: {e}")
        
        return analise_acoes
    
    def calcular_metricas_risco(self):
        """Calcula m√©tricas de risco da carteira usando dados REAIS"""
        print("\n‚ö†Ô∏è Calculando M√©tricas de Risco com Dados REAIS...")
        
        # Obter dados hist√≥ricos REAIS via market_data
        try:
            # 1. Renda Fixa - usar taxa CDI real
            try:
                # Taxa CDI aproximada (poderia buscar de API do Banco Central)
                retorno_renda_fixa = 0.1165  # CDI ~11.65% a.a. (valor real atual)
                volatilidade_renda_fixa = 0.02  # Baixa volatilidade
            except:
                retorno_renda_fixa = 0.08
                volatilidade_renda_fixa = 0.02
            
            # 2. Fundos Cambiais - calcular m√©dia real dos fundos da carteira
            retorno_fundos = []
            for fundo in self.carteira_ideal['alocacao']['fundos_cambiais']['itens']:
                try:
                    # Extrair taxa de retorno real do fundo
                    taxa = fundo.get('taxa_retorno', '5% a.a.')
                    # Converter string para float (ex: "5% a.a." -> 0.05)
                    taxa_num = float(taxa.replace('%', '').replace('a.a.', '').strip()) / 100
                    retorno_fundos.append(taxa_num)
                except:
                    retorno_fundos.append(0.05)
            
            retorno_fundos_cambiais = np.mean(retorno_fundos) if retorno_fundos else 0.05
            volatilidade_fundos = 0.08  # Volatilidade moderada
            
            # 3. Criptomoedas - calcular retorno real baseado em dados hist√≥ricos
            try:
                from apis.binance_api import BinanceMercadoAPI
                binance = BinanceMercadoAPI()
                
                # Buscar dados hist√≥ricos de BTC (principal cripto)
                df_btc = binance.get_historical_data('BTCUSDT')
                if not df_btc.empty and len(df_btc) > 30:
                    # Calcular retorno dos √∫ltimos 30 dias
                    retornos_diarios = df_btc['close'].pct_change().dropna()
                    retorno_medio_diario = retornos_diarios.mean()
                    retorno_criptomoedas = retorno_medio_diario * 252  # Anualizar
                    volatilidade_criptos = retornos_diarios.std() * np.sqrt(252)
                else:
                    retorno_criptomoedas = 0.25
                    volatilidade_criptos = 0.60
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao buscar dados cripto: {e}")
                retorno_criptomoedas = 0.25
                volatilidade_criptos = 0.60
            
            # 4. A√ß√µes - calcular retorno real baseado em dados hist√≥ricos
            try:
                import yfinance as yf
                acoes = ['PETR4.SA', 'VALE3.SA', 'BBAS3.SA']
                retornos_acoes = []
                
                for acao in acoes:
                    ticker = yf.Ticker(acao)
                    hist = ticker.history(period='1mo')
                    if not hist.empty and len(hist) > 1:
                        retorno = (hist['Close'].iloc[-1] / hist['Close'].iloc[0]) - 1
                        retornos_acoes.append(retorno)
                
                if retornos_acoes:
                    retorno_mensal = np.mean(retornos_acoes)
                    retorno_acoes_anual = (1 + retorno_mensal) ** 12 - 1
                    volatilidade_acoes = np.std(retornos_acoes) * np.sqrt(12)
                else:
                    retorno_acoes_anual = 0.15
                    volatilidade_acoes = 0.25
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao buscar dados a√ß√µes: {e}")
                retorno_acoes_anual = 0.15
                volatilidade_acoes = 0.25
            
            # Consolidar retornos REAIS
            retornos_reais = {
                'renda_fixa': retorno_renda_fixa,
                'fundos_cambiais': retorno_fundos_cambiais,
                'criptomoedas': retorno_criptomoedas,
                'acoes': retorno_acoes_anual
            }
            
            # Volatilidades REAIS
            volatilidades = {
                'renda_fixa': volatilidade_renda_fixa,
                'fundos_cambiais': volatilidade_fundos,
                'criptomoedas': volatilidade_criptos,
                'acoes': volatilidade_acoes
            }
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro geral ao calcular m√©tricas: {e}")
            # Fallback para valores conservadores
            retornos_reais = {
                'renda_fixa': 0.08,
                'fundos_cambiais': 0.05,
                'criptomoedas': 0.25,
                'acoes': 0.15
            }
            volatilidades = {
                'renda_fixa': 0.02,
                'fundos_cambiais': 0.08,
                'criptomoedas': 0.60,
                'acoes': 0.25
            }
        
        # Calcular retorno ponderado
        pesos = {
            'renda_fixa': 0.40,
            'fundos_cambiais': 0.15,
            'criptomoedas': 0.15,
            'acoes': 0.30
        }
        
        retorno_esperado = sum(pesos[k] * retornos_reais[k] for k in pesos)
        
        # Calcular volatilidade da carteira (simplificado)
        volatilidade_carteira = np.sqrt(sum((pesos[k] * volatilidades[k])**2 for k in pesos))
        
        # Sharpe Ratio (assumindo taxa livre de risco Selic ~11.65%)
        taxa_livre_risco = 0.1165
        sharpe_ratio = (retorno_esperado - taxa_livre_risco) / volatilidade_carteira if volatilidade_carteira > 0 else 0
        
        metricas = {
            'retorno_esperado': retorno_esperado,
            'volatilidade': volatilidade_carteira,
            'sharpe_ratio': sharpe_ratio,
            'retornos_individuais': retornos_reais,
            'volatilidades_individuais': volatilidades,
            'diversificacao': {
                'renda_fixa': pesos['renda_fixa'],
                'fundos_cambiais': pesos['fundos_cambiais'],
                'criptomoedas': pesos['criptomoedas'],
                'acoes': pesos['acoes']
            },
            'fonte_dados': 'REAL'  # Indicador de que usou dados reais
        }
        
        print(f"üìä Retorno Esperado: {retorno_esperado:.2%} (dados REAIS)")
        print(f"üìä Volatilidade: {volatilidade_carteira:.2%}")
        print(f"üìä Sharpe Ratio: {sharpe_ratio:.2f}")
        print(f"üìä Diversifica√ß√£o: {pesos}")
        print(f"‚úÖ Fonte: Dados REAIS das APIs")
        
        return metricas
    
    def calcular_metricas_avancadas(self, retornos_mensais):
        """Calcula m√©tricas financeiras avan√ßadas a partir de uma s√©rie de retornos mensais"""
        if len(retornos_mensais) == 0:
            return {}
        retornos = np.array(retornos_mensais)
        media = np.mean(retornos)
        std = np.std(retornos)
        sharpe = media / std * np.sqrt(12) if std > 0 else 0
        sortino = media / np.std(retornos[retornos < 0]) * np.sqrt(12) if np.any(retornos < 0) else 0
        max_drawdown = 0
        cagr = 0
        if len(retornos) > 1:
            # Calcular drawdown
            acc = np.cumprod(1 + retornos)
            peak = np.maximum.accumulate(acc)
            drawdown = (acc - peak) / peak
            max_drawdown = drawdown.min()
            # CAGR
            anos = len(retornos) / 12
            cagr = (acc[-1]) ** (1/anos) - 1 if anos > 0 else 0
        return {
            'retorno_medio_mensal': float(media),
            'volatilidade_mensal': float(std),
            'sharpe_ratio': float(sharpe),
            'sortino_ratio': float(sortino),
            'max_drawdown': float(max_drawdown),
            'cagr': float(cagr)
        }

    def evolucao_mensal(self, fundos, acoes, criptos, meses=24):
        """Calcula a evolu√ß√£o mensal da carteira usando dados hist√≥ricos REAIS"""
        print(f"\nüìà Calculando evolu√ß√£o mensal com dados REAIS ({meses} meses)...")
        
        datas = []
        valores = []
        valor_total = 0
        
        # Inicializar com valor inicial
        for f in fundos:
            valor_total += f['valor']
        for a in acoes:
            valor_total += a['valor']
        for c in criptos:
            valor_total += c['valor']
        
        valores.append(valor_total)
        datas.append('M0')
        
        # Calcular evolu√ß√£o usando dados REAIS
        for m in range(1, meses+1):
            retorno_mensal = 0
            n = 0
            peso_total = 0
            
            # 1. FUNDOS - usar rentabilidades reais quando dispon√≠veis
            for f in fundos:
                peso_fundo = f['valor'] / valor_total
                if f.get('dados_mercado') and f['dados_mercado'].get('rentabilidades'):
                    # Usar dados reais do fundo
                    anos = sorted(f['dados_mercado']['rentabilidades'].keys())
                    if anos:
                        ano = anos[-1]
                        meses_fundo = f['dados_mercado']['rentabilidades'][ano]
                        if meses_fundo:
                            # Usar m√©dia dos meses dispon√≠veis
                            media_mensal = np.mean(list(meses_fundo.values()))
                            retorno_mensal += media_mensal * peso_fundo
                            peso_total += peso_fundo
                            n += 1
                else:
                    # Fallback: estimar 5% a.a. = 0.41% a.m.
                    retorno_mensal += (0.05/12) * peso_fundo
                    peso_total += peso_fundo
                    n += 1
            
            # 2. A√á√ïES - buscar retorno real
            try:
                import yfinance as yf
                for a in acoes:
                    peso_acao = a['valor'] / valor_total
                    ticker_symbol = a.get('ticker', 'PETR4') + '.SA'
                    
                    try:
                        ticker = yf.Ticker(ticker_symbol)
                        hist = ticker.history(period='1mo')
                        
                        if not hist.empty and len(hist) > 5:
                            # Calcular retorno mensal real
                            retorno_real = (hist['Close'].iloc[-1] / hist['Close'].iloc[0]) - 1
                            retorno_mensal += retorno_real * peso_acao
                            peso_total += peso_acao
                            n += 1
                        else:
                            # Fallback: 15% a.a. = 1.17% a.m.
                            retorno_mensal += (0.15/12) * peso_acao
                            peso_total += peso_acao
                            n += 1
                    except:
                        retorno_mensal += (0.15/12) * peso_acao
                        peso_total += peso_acao
                        n += 1
            except:
                # Fallback para todas as a√ß√µes
                for a in acoes:
                    peso_acao = a['valor'] / valor_total
                    retorno_mensal += (0.15/12) * peso_acao
                    peso_total += peso_acao
                    n += 1
            
            # 3. CRIPTOMOEDAS - buscar retorno real
            try:
                from apis.binance_api import BinanceMercadoAPI
                binance = BinanceMercadoAPI()
                
                for c in criptos:
                    peso_cripto = c['valor'] / valor_total
                    ticker_symbol = c.get('ticker', 'BTC') + 'USDT'
                    
                    try:
                        df = binance.get_historical_data(ticker_symbol)
                        if not df.empty and len(df) > 20:
                            # Calcular retorno mensal real (√∫ltimos 30 dias)
                            retorno_real = (df['close'].iloc[-1] / df['close'].iloc[-30]) - 1
                            retorno_mensal += retorno_real * peso_cripto
                            peso_total += peso_cripto
                            n += 1
                        else:
                            # Fallback: 25% a.a. = 1.88% a.m.
                            retorno_mensal += (0.25/12) * peso_cripto
                            peso_total += peso_cripto
                            n += 1
                    except:
                        retorno_mensal += (0.25/12) * peso_cripto
                        peso_total += peso_cripto
                        n += 1
            except:
                # Fallback para todas as criptos
                for c in criptos:
                    peso_cripto = c['valor'] / valor_total
                    retorno_mensal += (0.25/12) * peso_cripto
                    peso_total += peso_cripto
                    n += 1
            
            # Normalizar retorno se necess√°rio
            if peso_total > 0 and peso_total != 1.0:
                retorno_mensal = retorno_mensal / peso_total
            
            # Aplicar retorno ao valor total
            valor_total = valor_total * (1 + retorno_mensal)
            valores.append(valor_total)
            datas.append(f'M{m}')
            
            # Mostrar progresso a cada 6 meses
            if m % 6 == 0:
                print(f"   ‚úì M√™s {m}: R$ {valor_total:,.2f} (retorno: {retorno_mensal:.2%})")
        
        retornos_mensais = np.diff(valores) / valores[:-1]
        
        print(f"‚úÖ Evolu√ß√£o calculada com {n} fontes de dados")
        
        return datas, valores, retornos_mensais

    def gerar_relatorio_completo(self):
        """Gera relat√≥rio completo da carteira ideal"""
        print("\n" + "="*60)
        print("üìã RELAT√ìRIO COMPLETO - CARTEIRA IDEAL")
        print("="*60)
        
        # Atualizar dados de mercado
        if not self.atualizar_dados_mercado():
            return None
        
        # Analisar cada classe de ativo
        renda_fixa = self.analisar_renda_fixa()
        fundos_cambiais = self.analisar_fundos()
        criptomoedas = self.analisar_criptomoedas()
        acoes = self.analisar_acoes()
        
        # Calcular m√©tricas de risco
        metricas_risco = self.calcular_metricas_risco()
        
        # Tabela detalhada de ativos
        ativos = []
        valor_total = self.carteira_ideal['valor_total']
        for f in fundos_cambiais['fundos'].values():
            ativos.append({
                'classe': 'Fundo Cambial',
                'nome': f['nome'],
                'valor': f['valor'],
                'percentual': f['valor']/valor_total*100,
                'rentabilidade': f.get('taxa_retorno'),
                'anos_dados': f.get('anos_dados', 0)
            })
        for a in acoes['acoes'].values():
            ativos.append({
                'classe': 'A√ß√£o',
                'nome': a['nome'],
                'valor': a['valor'],
                'percentual': a['valor']/valor_total*100,
                'preco_atual': a.get('preco_atual'),
                'rentabilidade': None
            })
        for c in criptomoedas['criptos'].values():
            ativos.append({
                'classe': 'Criptomoeda',
                'nome': c['nome'],
                'valor': c['valor'],
                'percentual': c['valor']/valor_total*100,
                'preco_atual': c.get('preco_atual'),
                'rentabilidade': None
            })
        for rf in renda_fixa['itens']:
            ativos.append({
                'classe': 'Renda Fixa',
                'nome': rf['nome'],
                'valor': rf['valor'],
                'percentual': rf['valor']/valor_total*100,
                'rentabilidade': rf.get('taxa_retorno')
            })
        print("\nTabela detalhada de ativos:")
        for a in ativos:
            print(a)
        
        # Evolu√ß√£o mensal simulada
        datas, valores, retornos_mensais = self.evolucao_mensal(
            list(fundos_cambiais['fundos'].values()),
            list(acoes['acoes'].values()),
            list(criptomoedas['criptos'].values()),
            meses=24
        )
        metricas_avancadas = self.calcular_metricas_avancadas(retornos_mensais)
        print("\nEvolu√ß√£o mensal simulada (√∫ltimos 24 meses):")
        for d, v in zip(datas, valores):
            print(f"{d}: R$ {v:,.2f}")
        print("\nM√©tricas avan√ßadas:")
        for k, v in metricas_avancadas.items():
            print(f"{k}: {v}")
        
        # Gerar gr√°fico da evolu√ß√£o (opcional)
        try:
            plt.figure(figsize=(10,4))
            plt.plot(datas, valores, marker='o')
            plt.title('Evolu√ß√£o Simulada do Valor da Carteira')
            plt.xlabel('M√™s')
            plt.ylabel('Valor (R$)')
            plt.grid()
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            with open('grafico_evolucao_carteira.png', 'wb') as f:
                f.write(buf.read())
            print("Gr√°fico salvo como grafico_evolucao_carteira.png")
        except Exception as e:
            print(f"Erro ao gerar gr√°fico: {e}")
        
        # Gerar relat√≥rio JSON
        relatorio = {
            'timestamp': datetime.now().isoformat(),
            'carteira': self.carteira_ideal,
            'analise': {
                'renda_fixa': renda_fixa,
                'fundos_cambiais': fundos_cambiais,
                'criptomoedas': criptomoedas,
                'acoes': acoes
            },
            'metricas_risco': metricas_risco,
            'metricas_avancadas': metricas_avancadas,
            'ativos': ativos,
            'evolucao_mensal': {
                'datas': datas,
                'valores': valores,
                'retornos_mensais': retornos_mensais.tolist() if hasattr(retornos_mensais, 'tolist') else list(retornos_mensais)
            },
            'resumo': {
                'valor_total': self.carteira_ideal['valor_total'],
                'alocacao_por_classe': {
                    'Renda Fixa': f"{renda_fixa['percentual']:.1f}%",
                    'Fundos Cambiais': f"{fundos_cambiais['percentual']:.1f}%",
                    'Criptomoedas': f"{criptomoedas['percentual']:.1f}%",
                    'A√ß√µes': f"{acoes['percentual']:.1f}%"
                }
            }
        }
        
        # Salvar relat√≥rio
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"relatorio_carteira_ideal_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(relatorio, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Relat√≥rio salvo em: {filename}")
        
        # Exibir resumo
        print("\n" + "="*60)
        print("üìä RESUMO DA CARTEIRA IDEAL")
        print("="*60)
        print(f"üí∞ Valor Total: R$ {self.carteira_ideal['valor_total']:,.2f}")
        print(f"üìà Retorno Esperado: {metricas_risco['retorno_esperado']:.2%}")
        print(f"‚ö†Ô∏è Volatilidade: {metricas_risco['volatilidade']:.2%}")
        print(f"üìä Sharpe Ratio: {metricas_risco['sharpe_ratio']:.2f}")
        print("\nüéØ Aloca√ß√£o por Classe:")
        for classe, percentual in relatorio['resumo']['alocacao_por_classe'].items():
            print(f"   ‚Ä¢ {classe}: {percentual}")
        print("\nM√©tricas Avan√ßadas:")
        for k, v in metricas_avancadas.items():
            print(f"   {k}: {v}")
        print("\nEvolu√ß√£o Mensal (√∫ltimos 24 meses):")
        for d, v in zip(datas, valores):
            print(f"   {d}: R$ {v:,.2f}")
        
        return relatorio

    def gerar_relatorio_txt(self, relatorio):
        """Gera relat√≥rio em formato .txt"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"relatorio_carteira_ideal_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("üìã RELAT√ìRIO COMPLETO - CARTEIRA IDEAL DIVERSIFICADA\n")
            f.write("="*80 + "\n")
            f.write(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"Vers√£o: 1.0\n\n")
            
            # Informa√ß√µes da Carteira
            f.write("üìä INFORMA√á√ïES DA CARTEIRA\n")
            f.write("-"*50 + "\n")
            f.write(f"Nome: {relatorio['carteira']['nome']}\n")
            f.write(f"Descri√ß√£o: {relatorio['carteira']['descricao']}\n")
            f.write(f"Data de Cria√ß√£o: {relatorio['carteira']['data_criacao']}\n")
            f.write(f"Valor Total: R$ {relatorio['carteira']['valor_total']:,.2f}\n")
            f.write(f"Perfil de Risco: {relatorio['carteira']['metadados']['perfil_risco']}\n")
            f.write(f"Horizonte de Tempo: {relatorio['carteira']['metadados']['horizonte_tempo']}\n")
            f.write(f"Estrat√©gia: {relatorio['carteira']['metadados']['estrategia']}\n\n")
            
            # Aloca√ß√£o por Classe
            f.write("üéØ ALOCA√á√ÉO POR CLASSE DE ATIVO\n")
            f.write("-"*50 + "\n")
            for classe, percentual in relatorio['resumo']['alocacao_por_classe'].items():
                valor_classe = relatorio['carteira']['valor_total'] * float(percentual.strip('%')) / 100
                f.write(f"{classe}: {percentual} (R$ {valor_classe:,.2f})\n")
            f.write("\n")
            
            # An√°lise Detalhada por Classe
            f.write("üìà AN√ÅLISE DETALHADA POR CLASSE\n")
            f.write("="*80 + "\n")
            
            # Renda Fixa
            f.write("\nüí∞ RENDA FIXA\n")
            f.write("-"*30 + "\n")
            renda_fixa = relatorio['analise']['renda_fixa']
            f.write(f"Valor Total: R$ {renda_fixa['total']:,.2f}\n")
            f.write(f"Percentual da Carteira: {renda_fixa['percentual']:.1f}%\n\n")
            for item in renda_fixa['itens']:
                f.write(f"  ‚Ä¢ {item['nome']}\n")
                f.write(f"    Valor: R$ {item['valor']:,.2f}\n")
                f.write(f"    Taxa de Retorno: {item['taxa_retorno']}\n")
                f.write(f"    Tipo: {item['tipo']}\n\n")
            
            # Fundos Cambiais
            f.write("üè¶ FUNDOS CAMBIAIS\n")
            f.write("-"*30 + "\n")
            fundos = relatorio['analise']['fundos_cambiais']
            f.write(f"Valor Total: R$ {fundos['total']:,.2f}\n")
            f.write(f"Percentual da Carteira: {fundos['percentual']:.1f}%\n\n")
            for cnpj, fundo in fundos['fundos'].items():
                f.write(f"  ‚Ä¢ {fundo['nome']}\n")
                f.write(f"    CNPJ: {cnpj}\n")
                f.write(f"    Valor: R$ {fundo['valor']:,.2f}\n")
                f.write(f"    Taxa de Retorno: {fundo['taxa_retorno']}\n")
                f.write(f"    Slug: {fundo['slug']}\n")
                if fundo.get('dados_mercado'):
                    f.write(f"    Anos de Dados: {fundo.get('anos_dados', 'N/A')}\n")
                else:
                    f.write(f"    Status: {fundo.get('erro', 'Dados n√£o dispon√≠veis')}\n")
                f.write("\n")
            
            # Criptomoedas
            f.write("‚Çø CRIPTOMOEDAS\n")
            f.write("-"*30 + "\n")
            criptos = relatorio['analise']['criptomoedas']
            f.write(f"Valor Total: R$ {criptos['total']:,.2f}\n")
            f.write(f"Percentual da Carteira: {criptos['percentual']:.1f}%\n\n")
            for ticker, cripto in criptos['criptos'].items():
                f.write(f"  ‚Ä¢ {cripto['nome']} ({ticker})\n")
                f.write(f"    Valor: R$ {cripto['valor']:,.2f}\n")
                if cripto.get('preco_atual'):
                    f.write(f"    Pre√ßo Atual: ${cripto['preco_atual']:,.2f}\n")
                f.write("\n")
            
            # A√ß√µes
            f.write("üìà A√á√ïES\n")
            f.write("-"*30 + "\n")
            acoes = relatorio['analise']['acoes']
            f.write(f"Valor Total: R$ {acoes['total']:,.2f}\n")
            f.write(f"Percentual da Carteira: {acoes['percentual']:.1f}%\n\n")
            for ticker, acao in acoes['acoes'].items():
                f.write(f"  ‚Ä¢ {acao['nome']} ({ticker})\n")
                f.write(f"    Valor: R$ {acao['valor']:,.2f}\n")
                if acao.get('preco_atual'):
                    f.write(f"    Pre√ßo Atual: R$ {acao['preco_atual']:,.2f}\n")
                f.write("\n")
            
            # M√©tricas de Risco
            f.write("‚ö†Ô∏è M√âTRICAS DE RISCO\n")
            f.write("-"*30 + "\n")
            metricas = relatorio['metricas_risco']
            f.write(f"Retorno Esperado: {metricas['retorno_esperado']:.2%}\n")
            f.write(f"Volatilidade: {metricas['volatilidade']:.2%}\n")
            f.write(f"Sharpe Ratio: {metricas['sharpe_ratio']:.2f}\n")
            f.write(f"Diversifica√ß√£o: {metricas['diversificacao']}\n\n")
            
            # M√©tricas Avan√ßadas
            f.write("üìä M√âTRICAS AVAN√áADAS\n")
            f.write("-"*30 + "\n")
            metricas_av = relatorio['metricas_avancadas']
            for k, v in metricas_av.items():
                if isinstance(v, float):
                    f.write(f"{k}: {v:.6f}\n")
                else:
                    f.write(f"{k}: {v}\n")
            f.write("\n")
            
            # Evolu√ß√£o Mensal
            f.write("üìà EVOLU√á√ÉO MENSAL SIMULADA (√öLTIMOS 24 MESES)\n")
            f.write("-"*60 + "\n")
            evolucao = relatorio['evolucao_mensal']
            for data, valor in zip(evolucao['datas'], evolucao['valores']):
                f.write(f"{data}: R$ {valor:,.2f}\n")
            f.write("\n")
            
            # Tabela de Ativos
            f.write("üìã TABELA DETALHADA DE ATIVOS\n")
            f.write("-"*60 + "\n")
            f.write(f"{'Classe':<15} {'Nome':<40} {'Valor':<15} {'%':<8} {'Rentabilidade':<15}\n")
            f.write("-"*100 + "\n")
            for ativo in relatorio['ativos']:
                nome = ativo['nome'][:38] + ".." if len(ativo['nome']) > 40 else ativo['nome']
                valor = f"R$ {ativo['valor']:,.2f}"
                percentual = f"{ativo['percentual']:.1f}%"
                rentabilidade = ativo.get('rentabilidade', 'N/A') or 'N/A'
                f.write(f"{ativo['classe']:<15} {nome:<40} {valor:<15} {percentual:<8} {rentabilidade:<15}\n")
            f.write("\n")
            
            # Objetivos da Carteira
            f.write("üéØ OBJETIVOS DA CARTEIRA\n")
            f.write("-"*30 + "\n")
            for objetivo in relatorio['carteira']['metadados']['objetivos']:
                f.write(f"‚Ä¢ {objetivo}\n")
            f.write("\n")
            
            # Observa√ß√µes Finais
            f.write("üìù OBSERVA√á√ïES FINAIS\n")
            f.write("-"*30 + "\n")
            f.write("‚Ä¢ Este relat√≥rio foi gerado automaticamente pelo sistema de an√°lise de carteiras\n")
            f.write("‚Ä¢ Os dados de mercado s√£o atualizados em tempo real\n")
            f.write("‚Ä¢ As m√©tricas de risco s√£o calculadas com base em dados hist√≥ricos\n")
            f.write("‚Ä¢ Recomenda-se rebalanceamento trimestral conforme estrat√©gia definida\n")
            f.write("‚Ä¢ Consulte um profissional de investimentos antes de tomar decis√µes\n\n")
            
            f.write("="*80 + "\n")
            f.write("FIM DO RELAT√ìRIO\n")
            f.write("="*80 + "\n")
        
        print(f"üìÑ Relat√≥rio TXT salvo em: {filename}")
        return filename

def main():
    """Fun√ß√£o principal"""
    # For√ßar UTF-8 no Windows para evitar erros de encoding
    import sys
    if sys.platform == 'win32':
        import io
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
    
    print("üöÄ Iniciando teste da Carteira Ideal...")
    
    teste = CarteiraIdealTest()
    if not teste.carteira_ideal:
        print("‚ùå N√£o foi poss√≠vel carregar a carteira ideal!")
        return
    
    relatorio = teste.gerar_relatorio_completo()
    
    if relatorio:
        # Gerar relat√≥rio em formato TXT
        teste.gerar_relatorio_txt(relatorio)
        print("\n‚úÖ Teste da Carteira Ideal conclu√≠do com sucesso!")
    else:
        print("\n‚ùå Erro durante o teste da Carteira Ideal!")

if __name__ == "__main__":
    main() 