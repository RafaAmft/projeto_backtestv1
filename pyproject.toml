# ========================================
# PYPROJECT.TOML
# Sistema de Análise de Portfólios v1.1.0
# ========================================

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

# ========================================
# METADADOS DO PROJETO
# ========================================

[project]
name = "portfolio-analyzer"
version = "1.1.0"
description = "Sistema completo para análise de portfólios, auditoria de fundos e monitoramento de mercado"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Rafael Augusto Masson Fontes", email = "seu-email@example.com"}
]
maintainers = [
    {name = "Rafael Augusto Masson Fontes", email = "seu-email@example.com"}
]
keywords = [
    "finance",
    "portfolio",
    "investment",
    "analysis",
    "stocks",
    "crypto",
    "funds",
    "cvm",
    "backtest"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "yfinance>=0.2.36",
    "pandas>=2.1.4",
    "requests>=2.31.0",
    "numpy>=1.26.2",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    "streamlit>=1.29.0",
    "plotly>=5.17.0",
    "openpyxl>=3.1.2",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "scikit-learn>=1.3.2",
    "scipy>=1.11.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.1",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

viz = [
    "bokeh>=3.3.2",
    "altair>=5.2.0",
]

ml = [
    "ta>=0.10.2",
    "tensorflow>=2.15.0",
]

all = [
    "portfolio-analyzer[dev,docs,viz,ml]",
]

[project.urls]
Homepage = "https://github.com/RafaAmft/projeto_backtestv1"
Documentation = "https://github.com/RafaAmft/projeto_backtestv1#readme"
Repository = "https://github.com/RafaAmft/projeto_backtestv1"
"Bug Tracker" = "https://github.com/RafaAmft/projeto_backtestv1/issues"
Changelog = "https://github.com/RafaAmft/projeto_backtestv1/blob/main/CHANGELOG.md"

[project.scripts]
portfolio-analyzer = "core.market_indices_fixed:main"

# ========================================
# BLACK - FORMATAÇÃO
# ========================================

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | cache_temp
  | relatorios
  | data
)/
'''

# ========================================
# ISORT - ORDENAÇÃO DE IMPORTS
# ========================================

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
known_first_party = ["core", "apis", "dashboard", "examples"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip = [
    ".git",
    ".venv",
    "venv",
    "env",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]

# ========================================
# MYPY - TYPE CHECKING
# ========================================

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
check_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "streamlit.*",
    "plotly.*",
    "seaborn.*",
]
ignore_missing_imports = true

# ========================================
# PYTEST - TESTES
# ========================================

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "slow: marca testes lentos",
    "integration: testes de integração",
    "unit: testes unitários",
    "api: testes que usam APIs externas",
    "cache: testes de cache",
    "portfolio: testes de portfólio",
]

# ========================================
# COVERAGE - COBERTURA DE CÓDIGO
# ========================================

[tool.coverage.run]
source = ["core", "apis", "dashboard", "examples"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "pass",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"

# ========================================
# BANDIT - SEGURANÇA
# ========================================

[tool.bandit]
targets = ["core", "apis", "dashboard"]
exclude_dirs = [
    "/tests/",
    "/test_*.py",
    "/.venv/",
    "/venv/",
]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls
]
severity = "medium"

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]

# ========================================
# PYLINT - LINTING
# ========================================

[tool.pylint.main]
jobs = 0
py-version = "3.10"
ignore = ["CVS", ".git", "__pycache__", ".venv", "venv"]

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
]

[tool.pylint.format]
max-line-length = 100

# ========================================
# SETUPTOOLS
# ========================================

[tool.setuptools]
package-dir = {"" = "."}
packages = ["core", "apis", "dashboard", "examples"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

# ========================================
# COMO USAR
# ========================================
#
# Instalar em modo desenvolvimento:
#   pip install -e .
#
# Instalar com dependências de dev:
#   pip install -e ".[dev]"
#
# Instalar todas as dependências:
#   pip install -e ".[all]"
#
# Build:
#   python -m build
#
# ========================================


